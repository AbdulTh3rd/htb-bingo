{"version":3,"sources":["lib/taskBank.js","components/BingoCard.jsx","components/Header.jsx","components/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["taskBank","BingoSquare","task","taskIndex","toggle","onClick","className","isChecked","title","link","href","rel","target","linkText","BingoCard","tasks","setTasks","completeTaskFunc","newTasks","thisTask","$tasks","map","t","i","key","text","Header","Footer","App","useState","JSON","parse","localStorage","getItem","useEffect","setItem","stringify","initTask","initializeTasks","arr","chosenTasks","length","r","Math","floor","random","indexOf","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.66052f43.chunk.js","sourcesContent":["const taskBank = [\n    {\n        \"title\": \"Box dosen't spawn\",\n    },\n    {\n        \"title\": \"They forgot the Vulnerability\",\n    },\n    {\n        \"title\": \"Mods say to stay on-topic\",\n    },\n    {\n        \"title\": \"Blind SQL Injection\",\n    },\n    {\n        \"title\": \"Nmap Scan through Proxy/Slow AF\",\n    },\n    {\n        \"title\": \"placeholder 5\",\n    },\n    {\n        \"title\": \"Exploit on Author's github\",\n    },\n    {\n        \"title\": \"XSS with unneccesary complex scripting\",\n    },\n    {\n        \"title\": \"Exploit on Box\",\n    },\n    {\n        \"title\": \"Unintended root within 2 hours\",\n    },\n    {\n        \"title\": \"Broken on Release Arena\",\n    },\n    {\n        \"title\": \"Obnoxious WAF\",\n    },\n    {\n        \"title\": \"Random dude asks for nudges 10 minutes in\",\n    },\n    {\n        \"title\": \"Have to Download lots of files\",\n    },\n    {\n        \"title\": \"Have to set up a complex/wierd lab environment to test stuff locally\",\n    },\n    {\n        \"title\": \"Malware on the box\",\n    },\n    {\n        \"title\": \"Just a challenge disguised as a box\",\n    },\n    {\n        \"title\": \"syzmex73 get's user blood\",\n    },\n    {\n        \"title\": \"cre4k argues with random guy\",\n    },\n    {\n        \"title\": \"working easy wins (polkit, pwnkit, noPac, etc)\",\n    },\n    {\n        \"title\": \"placeholder 1\",\n    },\n    {\n        \"title\": \"placeholder 2\",\n    },\n    {\n        \"title\": \"placeholder 3\",\n    },\n    {\n        \"title\": \"placeholder 4\",\n    }\n];\n\nexport default taskBank;\n","import React from 'react';\nimport '../styles/BingoCard.css';\n\nfunction BingoSquare({ task, taskIndex, toggle }) {\n\n\n    const toggleChecked = () =>{\n        toggle(taskIndex);\n    }\n\n    const taskLink = () => {\n        if (task.link) {\n            return (\n                <div className=\"taskLinkContainer\">\n                    <a className=\"taskLink\" href={task.link} rel=\"noopener noreferrer\" target=\"_blank\">{task.linkText || \"Learn More\"}</a>\n                </div>\n            )\n        } else {\n            return null;\n        }\n    }\n\n\n    return (\n        <div onClick={toggleChecked} className={ task.isChecked ? 'bingoSquare bingoSquare--checked' : 'bingoSquare'}>\n            <div className=\"bingoCheckbox\"></div>\n            <div className=\"taskTextContainer\">\n                <div className={ task.title === 'FREE' ? 'taskText taskText--free' : 'taskText' }>\n                    {task.title}\n                </div>\n            </div>\n            { taskLink() }\n        </div>\n    )\n}\n\nfunction BingoCard({ tasks, setTasks }) {\n\n    const completeTaskFunc = (taskIndex) => {\n        let newTasks = [...tasks];\n        let thisTask = newTasks[taskIndex];\n        if (thisTask.isChecked) {\n            thisTask.isChecked = false\n        }\n        else {\n            thisTask.isChecked = true;\n        }\n\n        setTasks(newTasks);\n    }\n    \n    const $tasks = tasks.map((t, i) => <BingoSquare key={t.text} toggle={completeTaskFunc} taskIndex={i} task={t} />)\n\n    return (\n        <div className=\"BingoCard\">{$tasks}</div>\n    )\n}\n\nexport default BingoCard;","import React from 'react';\nimport '../styles/Header.css';\n\nfunction Header() {\n    return (\n        <div className=\"Header\">\n            <h1>HackTheBox Release <span className=\"aside\">Bingo</span></h1>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport '../styles/Footer.css';\n\nfunction Footer() {\n    return (\n        <footer className=\"Footer\">\n            <h2>s</h2>\n            <h2>s</h2>\n            <h2>s</h2>\n            <h2>s</h2>\n        </footer>\n    )\n\n}\n\nexport default Footer;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport taskBank from './lib/taskBank';\nimport BingoCard from './components/BingoCard';\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nfunction App() {\n\n  const [tasks, setTasks] = useState(\n    JSON.parse(localStorage.getItem('octoberBingoTasks')) || []\n  );\n\n  useEffect(() => {\n    localStorage.setItem('octoberBingoTasks', JSON.stringify(tasks));\n  }, [tasks])\n\n  const initTask = (task) => {\n    return {\n      isChecked: false,\n      ...task\n    }\n  }\n\n  const initializeTasks = () => {\n    setTasks([]);\n    let arr = [];\n    let chosenTasks = [];\n\n    while(arr.length < 25){\n        let r = Math.floor(Math.random() * taskBank.length);\n        let thisTask = initTask(taskBank[r]);\n\n        if(chosenTasks.indexOf(taskBank[r].title) === -1) arr.push(thisTask);\n        chosenTasks.push(taskBank[r].title);\n\n\n        if(arr.length === 12) arr.push(initTask({title: \"FREE\"}));\n    }\n\n    setTasks(arr);\n  }\n\n  if (tasks.length < 25) initializeTasks();\n\n  return (\n    <div className=\"App\">\n\n      <Header />\n\n      <div className=\"mainContainer\">\n        <div className=\"cardHeader\">\n          <h2 className=\"cardTitle\">release arena bingo</h2>\n          <button className=\"resetButton\" onClick={initializeTasks}>Shuffle!</button>\n        </div>\n        \n        <BingoCard className=\"BingoCard\" tasks={tasks} setTasks={setTasks} />\n      </div>\n\n      <Footer />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}